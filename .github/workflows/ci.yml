name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "yarn"
          cache-dependency-path: frontend/yarn.lock

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: yarn install

      - name: Run frontend linter
        working-directory: ./frontend
        run: yarn lint

      - name: Run frontend tests
        working-directory: ./frontend
        run: yarn test --run

      - name: Generate coverage report
        working-directory: ./frontend
        run: yarn test:coverage --run

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          fail_ci_if_error: false

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install backend dependencies
        working-directory: ./backend
        run: poetry install --no-interaction --no-root

      - name: Run backend tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: test_db
          SECRET_KEY: test-secret-key-for-ci
          ALGORITHM: HS256
        run: poetry run pytest --cov=src --cov-report=xml --cov-report=term

      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage.xml
          flags: backend
          fail_ci_if_error: false

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "yarn"
          cache-dependency-path: frontend/yarn.lock

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: yarn install --frozen-lockfile

      - name: Build frontend
        working-directory: ./frontend
        run: yarn build

      - name: Check build artifacts
        run: |
          if [ ! -d "frontend/dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          echo "âœ… Frontend build successful"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-check
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /home/vpn/shilka-type/
            git pull origin develop
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up --build -d
            docker system prune -f
