"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python -m scripts.seed_db
"""
import asyncio
import json
import random
from datetime import datetime, timedelta
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from src.database import AsyncSessionLocal, engine, Base
from src.auth.models import User
from src.theme.models import Theme
from src.stats.models import TypingSession
from src.auth.utils import get_password_hash


# –°–ø–∏—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
USERNAMES = [
    "speedtyper", "fastfingers", "keyboardninja", "typingmaster", "quickwriter",
    "codewizard", "textchampion", "rapidtyper", "swiftkeys", "blazingkeys"
]

WORDS_RU = [
    "–ø—Ä–∏–≤–µ—Ç", "–º–∏—Ä", "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "—Ç–µ–∫—Å—Ç", 
    "—Å–∫–æ—Ä–æ—Å—Ç—å", "—Ç–æ—á–Ω–æ—Å—Ç—å", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–±—ã—Å—Ç—Ä–æ", "–ø–µ—á–∞—Ç—å", "—Å–ª–æ–≤–æ", "–±—É–∫–≤–∞"
]

WORDS_EN = [
    "hello", "world", "code", "program", "computer", "keyboard", "text",
    "speed", "accuracy", "training", "fast", "typing", "word", "letter"
]

MODES = ["words", "time", "sentences", "quote"]
LANGUAGES = ["ru", "en"]


def generate_random_history(words: list[str]) -> list[list[dict]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–µ—á–∞—Ç–∏ –¥–ª—è —Å–ª–æ–≤"""
    history = []
    current_time = 0
    
    for word in words:
        word_history = []
        for char in word:
            # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏ (50-200 –º—Å)
            current_time += random.randint(50, 200)
            # 90% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
            correct = random.random() > 0.1
            word_history.append({
                "char": char,
                "correct": correct,
                "time": current_time
            })
        history.append(word_history)
    
    return history


def generate_typing_session(user_id: int, days_ago: int = 0) -> TypingSession:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é —Å–µ—Å—Å–∏—é –ø–µ—á–∞—Ç–∏"""
    # –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º –∏ —è–∑—ã–∫
    mode = random.choice(MODES)
    language = random.choice(LANGUAGES)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    word_list = WORDS_RU if language == "ru" else WORDS_EN
    num_words = random.randint(10, 30)
    words = random.choices(word_list, k=num_words)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = generate_random_history(words)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    total_chars = sum(len(word) for word in words)
    correct_chars = sum(
        sum(1 for char in word_hist if char["correct"])
        for word_hist in history
    )
    
    # –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (40-120 WPM)
    wpm = round(random.uniform(40, 120), 1)
    
    # –¢–æ—á–Ω–æ—Å—Ç—å (85-100%)
    accuracy = round((correct_chars / total_chars) * 100, 1) if total_chars > 0 else 100
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (15-60 —Å–µ–∫—É–Ω–¥)
    duration = random.randint(15, 60)
    
    # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å–µ–≥–æ–¥–Ω—è –¥–æ N –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
    created_at = datetime.utcnow() - timedelta(days=days_ago, hours=random.randint(0, 23))
    
    return TypingSession(
        user_id=user_id,
        wpm=wpm,
        accuracy=accuracy,
        duration=duration,
        words=json.dumps(words),
        history=json.dumps(history),
        typing_mode=mode,
        language=language,
        created_at=created_at
    )


async def seed_users(db: AsyncSession, count: int = 10) -> list[User]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = []
    
    for i in range(count):
        username = f"{random.choice(USERNAMES)}{random.randint(1, 999)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        result = await db.execute(select(User).filter(User.username == username))
        existing = result.scalar_one_or_none()
        if existing:
            continue
        
        user = User(
            username=username,
            hashed_password=get_password_hash("password123"),  # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            shilka_coins=random.randint(0, 1000)
            ,
            # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            default_time=30,
            default_words=25,
            default_language="en",
            default_mode="words",
            default_test_type="time",
        )
        
        db.add(user)
        users.append(user)
    
    await db.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        await db.refresh(user)
    
    return users


async def seed_themes(db: AsyncSession, users: list[User], count: int = 5) -> list[Theme]:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤"""
    themes = []
    sample_theme_data = {
        "colors": {"bg": "#ffffff", "text": "#000000", "primary": "#ff6600"},
        "font": "Inter",
    }

    for i in range(count):
        author = random.choice(users)
        theme = Theme(
            name=f"Theme {i+1}",
            author_id=author.id,
            theme_data=json.dumps(sample_theme_data),
            is_public=True,
            created_at=datetime.utcnow(),
        )
        db.add(theme)
        themes.append(theme)

    await db.commit()
    for t in themes:
        await db.refresh(t)

    return themes


async def seed_sessions(db: AsyncSession, users: list[User], sessions_per_user: int = 20):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –ø–µ—á–∞—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    total_created = 0
    for user in users:
        created_for_user = 0
        for day in range(sessions_per_user):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç 1 –¥–æ 3 —Å–µ—Å—Å–∏–π –∑–∞ –¥–µ–Ω—å
            sessions_today = random.randint(1, 3)

            for _ in range(sessions_today):
                session = generate_typing_session(user.id, days_ago=day)
                db.add(session)
                created_for_user += 1

        total_created += created_for_user
        print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {created_for_user} —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")

    await db.commit()
    print(f"\n‚úì –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {total_created} —Å–µ—Å—Å–∏–π")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üå± –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # –°–æ–∑–¥–∞–µ–º async —Å–µ—Å—Å–∏—é –ë–î
    async with AsyncSessionLocal() as db:
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("üë• –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            users = await seed_users(db, count=10)
            print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n")
            # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–º—ã –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            print("üé® –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–º—ã...")
            themes = await seed_themes(db, users, count=5)
            print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(themes)} —Ç–µ–º\n")

            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ–ª–æ–≤–∏–Ω–µ)
            for user in users:
                if themes and random.random() > 0.5:
                    chosen = random.choice(themes)
                    user.selected_theme_id = chosen.id
                    db.add(user)
            await db.commit()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–µ—á–∞—Ç–∏
            print("‚å®Ô∏è  –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –ø–µ—á–∞—Ç–∏...")
            await seed_sessions(db, users, sessions_per_user=20)
            
            print("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            result_users = await db.execute(select(User))
            total_users = len(result_users.scalars().all())
            
            result_sessions = await db.execute(select(TypingSession))
            total_sessions = len(result_sessions.scalars().all())
            
            print(f"  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {total_users}")
            print(f"  - –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ –ë–î: {total_sessions}")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await db.rollback()
            raise


if __name__ == "__main__":
    asyncio.run(main())
