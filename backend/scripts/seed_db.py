"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python -m scripts.seed_db
"""
import json
import random
from datetime import datetime, timedelta
from sqlalchemy.orm import Session

from src.database import SessionLocal, engine, Base
from src.auth.models import User
from src.stats.models import TypingSession
from src.auth.utils import get_password_hash


# –°–ø–∏—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
USERNAMES = [
    "speedtyper", "fastfingers", "keyboardninja", "typingmaster", "quickwriter",
    "codewizard", "textchampion", "rapidtyper", "swiftkeys", "blazingkeys"
]

WORDS_RU = [
    "–ø—Ä–∏–≤–µ—Ç", "–º–∏—Ä", "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "—Ç–µ–∫—Å—Ç", 
    "—Å–∫–æ—Ä–æ—Å—Ç—å", "—Ç–æ—á–Ω–æ—Å—Ç—å", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–±—ã—Å—Ç—Ä–æ", "–ø–µ—á–∞—Ç—å", "—Å–ª–æ–≤–æ", "–±—É–∫–≤–∞"
]

WORDS_EN = [
    "hello", "world", "code", "program", "computer", "keyboard", "text",
    "speed", "accuracy", "training", "fast", "typing", "word", "letter"
]

MODES = ["words", "time", "sentences", "quote"]
LANGUAGES = ["ru", "en"]


def generate_random_history(words: list[str]) -> list[list[dict]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–µ—á–∞—Ç–∏ –¥–ª—è —Å–ª–æ–≤"""
    history = []
    current_time = 0
    
    for word in words:
        word_history = []
        for char in word:
            # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏ (50-200 –º—Å)
            current_time += random.randint(50, 200)
            # 90% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
            correct = random.random() > 0.1
            word_history.append({
                "char": char,
                "correct": correct,
                "time": current_time
            })
        history.append(word_history)
    
    return history


def generate_typing_session(user_id: int, days_ago: int = 0) -> TypingSession:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é —Å–µ—Å—Å–∏—é –ø–µ—á–∞—Ç–∏"""
    # –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º –∏ —è–∑—ã–∫
    mode = random.choice(MODES)
    language = random.choice(LANGUAGES)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    word_list = WORDS_RU if language == "ru" else WORDS_EN
    num_words = random.randint(10, 30)
    words = random.choices(word_list, k=num_words)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = generate_random_history(words)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    total_chars = sum(len(word) for word in words)
    correct_chars = sum(
        sum(1 for char in word_hist if char["correct"])
        for word_hist in history
    )
    
    # –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (40-120 WPM)
    wpm = round(random.uniform(40, 120), 1)
    
    # –¢–æ—á–Ω–æ—Å—Ç—å (85-100%)
    accuracy = round((correct_chars / total_chars) * 100, 1) if total_chars > 0 else 100
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (15-60 —Å–µ–∫—É–Ω–¥)
    duration = random.randint(15, 60)
    
    # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å–µ–≥–æ–¥–Ω—è –¥–æ N –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
    created_at = datetime.utcnow() - timedelta(days=days_ago, hours=random.randint(0, 23))
    
    return TypingSession(
        user_id=user_id,
        wpm=wpm,
        accuracy=accuracy,
        duration=duration,
        words=json.dumps(words),
        history=json.dumps(history),
        typing_mode=mode,
        language=language,
        created_at=created_at
    )


def seed_users(db: Session, count: int = 10) -> list[User]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = []
    
    for i in range(count):
        username = f"{random.choice(USERNAMES)}{random.randint(1, 999)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing = db.query(User).filter(User.username == username).first()
        if existing:
            continue
        
        user = User(
            username=username,
            hashed_password=get_password_hash("password123"),  # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            shilka_coins=random.randint(0, 1000)
        )
        
        db.add(user)
        users.append(user)
    
    db.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        db.refresh(user)
    
    return users


def seed_sessions(db: Session, users: list[User], sessions_per_user: int = 20):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –ø–µ—á–∞—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    for user in users:
        for day in range(sessions_per_user):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç 1 –¥–æ 3 —Å–µ—Å—Å–∏–π –∑–∞ –¥–µ–Ω—å
            sessions_today = random.randint(1, 3)
            
            for _ in range(sessions_today):
                session = generate_typing_session(user.id, days_ago=day)
                db.add(session)
        
        print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {sessions_per_user * 2} —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
    
    db.commit()
    print(f"\n‚úì –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {sessions_per_user * 2 * len(users)} —Å–µ—Å—Å–∏–π")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üå± –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    Base.metadata.create_all(bind=engine)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üë• –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = seed_users(db, count=10)
        print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–µ—á–∞—Ç–∏
        print("‚å®Ô∏è  –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –ø–µ—á–∞—Ç–∏...")
        seed_sessions(db, users, sessions_per_user=20)
        
        print("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        total_users = db.query(User).count()
        total_sessions = db.query(TypingSession).count()
        print(f"  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {total_users}")
        print(f"  - –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ –ë–î: {total_sessions}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()


if __name__ == "__main__":
    main()
